<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAaAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAGgAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        ABoAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAMYAAADiAAAA4QAAAOEAAADhAAAA4QAA
        AOIAAADGAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAADGAAAA4gAAAOEAAADhAAAA4QAA
        AOEAAADiAAAAxgAAABsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADhAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAA
        AOEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB4AAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4QAA
        AB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOQAAAA5AAAAHQAAAB4AAAAeAAAAHgAAAB4AAAAdAAAAOQAAAOQAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADhAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAAOQAAADgAAAA4QAAAOEAAADhAAAA4QAAAOAAAADkAAAA+wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAAACUAAAABAAAAAAAA
        ABwAAADcAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANwAAAAcAAAAAAAAAAEAAAAoAAAA1QAA
        AFcAAAAEAAAAAwAAAGUAAADlAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADkAAAAZQAAAAMAAAAEAAAAXAAA
        ANcAAAD/AAAA8AAAAHwAAAAPAAAAAAAAAD8AAADDAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAwAAAAD0AAAAAAAAAEAAA
        AIEAAADyAAAA/wAAAP8AAAD/AAAA+wAAAKkAAAAnAAAAAAAAABwAAACaAAAA9gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9gAAAJoAAAAaAAAAAAAA
        ACgAAACtAAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAM4AAABDAAAAAAAAAAgAAABoAAAA5QAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOQAAABoAAAACAAA
        AAAAAABDAAAAzwAAAP8AAAD/AAAA/wAAAP8AAADdAAAA/wAAAP8AAAD/AAAA/wAAAOcAAABsAAAACQAA
        AAAAAAA/AAAAwwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAADAAAAAPQAA
        AAAAAAAJAAAAbAAAAOcAAAD/AAAA/wAAAP8AAAD/AAAA3QAAADMAAAC1AAAA/QAAAP8AAAD/AAAA/wAA
        APgAAACYAAAAGQAAAAAAAAAcAAAAmgAAAPYAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD2AAAAmgAA
        ABoAAAAAAAAAGgAAAJgAAAD4AAAA/wAAAP8AAAD/AAAA/QAAALQAAAAyAAAAAAAAABQAAACKAAAA8wAA
        AP8AAAD/AAAA/wAAAP8AAAC7AAAAMQAAAAAAAAAIAAAAaAAAAOUAAAD/AAAA/wAAAP8AAAD/AAAA5AAA
        AGgAAAAIAAAAAAAAADUAAAC8AAAA/wAAAP8AAAD/AAAA/wAAAPMAAACKAAAAFAAAAAAAAAAAAAAAAAAA
        AAUAAABkAAAA5AAAAP8AAAD/AAAA/wAAAP8AAADcAAAAWAAAAAQAAAAAAAAAPwAAAMMAAAD/AAAA/wAA
        AMAAAAA9AAAAAAAAAAQAAABcAAAA3gAAAP8AAAD/AAAA/wAAAP8AAADhAAAAYwAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA8AAAAwwAAAP8AAAD/AAAA/wAAAP8AAADxAAAAfgAAABAAAAAAAAAAHAAA
        AJkAAACZAAAAGwAAAAAAAAARAAAAhAAAAPIAAAD/AAAA/wAAAP8AAAD/AAAAwAAAADgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAoAAAAPkAAAD/AAAA/wAAAP8AAAD8AAAArQAA
        ACkAAAAAAAAABwAAAAcAAAAAAAAAKQAAALAAAAD8AAAA/wAAAP8AAAD/AAAA+QAAAJ8AAAAbAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAdQAAAOoAAAD/AAAA/wAA
        AP8AAAD/AAAA0AAAAEUAAAABAAAAAQAAAEUAAADQAAAA/wAAAP8AAAD/AAAA/wAAAOoAAAByAAAACwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAASgAA
        ANMAAAD/AAAA/wAAAP8AAAD/AAAA6AAAAHEAAABxAAAA6AAAAP8AAAD/AAAA/wAAAP8AAADTAAAASgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKwAAALMAAAD8AAAA/wAAAP8AAAD/AAAA+gAAAPoAAAD/AAAA/wAAAP8AAAD8AAAAsgAA
        ACsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAIcAAADzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8wAA
        AIcAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAGMAAADiAAAA/wAAAP8AAAD/AAAA/wAA
        AN8AAABgAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkAAADAAAAA/wAA
        AP8AAAC+AAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABwAAACaAAAAmgAAABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAkAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////+AH4AfgB+AH4AfgB+AH4AfgB+AH4AfgB+AH4AfgB+AH4AAAB+AA
        AAfgAAAH4AAAByAAAAQAAAAACAAAEAQAACAAAAAAAIABAABAAgCAIAQBwAAQA+AEIAf4AkAf/AAAP/4A
        AH//gAH//8AD///gB///8B////w////+f/8=
</value>
  </data>
</root>